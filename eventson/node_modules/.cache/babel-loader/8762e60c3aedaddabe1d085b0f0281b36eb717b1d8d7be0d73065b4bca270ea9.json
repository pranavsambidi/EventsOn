{"ast":null,"code":"var _jsxFileName = \"/Users/pranavsambidi/Desktop/EventsOn2.0/eventson/src/components/Requests.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Requests() {\n  _s();\n  const [requests, setRequests] = useState([]); // Store event requests\n  const [filter, setFilter] = useState(\"Pending\"); // Store filter state\n\n  // Fetch event requests from backend\n  useEffect(() => {\n    fetchRequests();\n  }, []);\n  const fetchRequests = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/events/requests\");\n      const data = await response.json();\n      setRequests(data); // Store in state\n    } catch (error) {\n      console.error(\"Error fetching requests:\", error);\n    }\n  };\n\n  // Update event status (Approve or Reject)\n  const updateStatus = async (id, status) => {\n    try {\n      const response = await fetch(`http://localhost:8080/events/update/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          status\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        alert(`Event ${status}!`);\n        fetchRequests(); // Refresh the list\n      } else {\n        alert(\"Error updating status\");\n      }\n    } catch (error) {\n      console.error(\"Error updating request:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn ms-md-3 ${filter === \"Pending\" ? \"btn-primary\" : \"btn-dark\"}`,\n        onClick: () => setFilter(\"Pending\"),\n        children: \"Pending\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn ms-md-3 ${filter === \"Approved\" ? \"btn-primary\" : \"btn-dark\"}`,\n        onClick: () => setFilter(\"Approved\"),\n        children: \"Approved\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn ms-md-3 ${filter === \"Rejected\" ? \"btn-primary\" : \"btn-dark\"}`,\n        onClick: () => setFilter(\"Rejected\"),\n        children: \"Rejected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Requests, \"RaUwJruZS3l0gxZDX9WHzmVhfAY=\");\n_c = Requests;\nexport default Requests;\nvar _c;\n$RefreshReg$(_c, \"Requests\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Requests","_s","requests","setRequests","filter","setFilter","fetchRequests","response","fetch","data","json","error","console","updateStatus","id","status","method","headers","body","JSON","stringify","result","success","alert","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pranavsambidi/Desktop/EventsOn2.0/eventson/src/components/Requests.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction Requests() {\n  const [requests, setRequests] = useState([]); // Store event requests\n  const [filter, setFilter] = useState(\"Pending\"); // Store filter state\n\n  // Fetch event requests from backend\n  useEffect(() => {\n    fetchRequests();\n  }, []);\n\n  const fetchRequests = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/events/requests\");\n      const data = await response.json();\n      setRequests(data); // Store in state\n    } catch (error) {\n      console.error(\"Error fetching requests:\", error);\n    }\n  };\n\n  // Update event status (Approve or Reject)\n  const updateStatus = async (id, status) => {\n    try {\n      const response = await fetch(`http://localhost:8080/events/update/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status }),\n      });\n\n      const result = await response.json();\n      if (result.success) {\n        alert(`Event ${status}!`);\n        fetchRequests(); // Refresh the list\n      } else {\n        alert(\"Error updating status\");\n      }\n    } catch (error) {\n      console.error(\"Error updating request:\", error);\n    }\n  };\n\n  return (\n    <div>\n      {/* Filter Buttons */}\n      <div className=\"mt-3\">\n        <button\n          className={`btn ms-md-3 ${filter === \"Pending\" ? \"btn-primary\" : \"btn-dark\"}`}\n          onClick={() => setFilter(\"Pending\")}\n        >\n          Pending\n        </button>\n        <button\n          className={`btn ms-md-3 ${filter === \"Approved\" ? \"btn-primary\" : \"btn-dark\"}`}\n          onClick={() => setFilter(\"Approved\")}\n        >\n          Approved\n        </button>\n        <button\n          className={`btn ms-md-3 ${filter === \"Rejected\" ? \"btn-primary\" : \"btn-dark\"}`}\n          onClick={() => setFilter(\"Rejected\")}\n        >\n          Rejected\n        </button>\n      </div>\n      <br />\n\n      {/* Display Requests */}\n      \n    </div>\n  );\n}\n\nexport default Requests;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}